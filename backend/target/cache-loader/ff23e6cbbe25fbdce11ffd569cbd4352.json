{"remainingRequest":"/Users/hien/Documents/junction/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/hien/Documents/junction/node_modules/ts-loader/index.js??ref--4-3!/Users/hien/Documents/junction/node_modules/eslint-loader/index.js!/Users/hien/Documents/junction/src/main/webapp/app/modules/account/register/register.tsx","dependencies":[{"path":"/Users/hien/Documents/junction/src/main/webapp/app/modules/account/register/register.tsx","mtime":1573937052817},{"path":"/Users/hien/Documents/junction/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/hien/Documents/junction/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { handleRegister, reset } from './register.reducer';\nexport const RegisterPage = (props) => {\n    const [password, setPassword] = useState('');\n    useEffect(() => () => props.reset(), []);\n    const handleValidSubmit = (event, values) => {\n        props.handleRegister(values.username, values.email, values.firstPassword);\n        event.preventDefault();\n    };\n    const updatePassword = event => setPassword(event.target.value);\n    return (React.createElement(\"div\", null,\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"8\" },\n                React.createElement(\"h1\", { id: \"register-title\" }, \"Registration\"))),\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"8\" },\n                React.createElement(AvForm, { id: \"register-form\", onValidSubmit: handleValidSubmit },\n                    React.createElement(AvField, { name: \"username\", label: \"Username\", placeholder: 'Your username', validate: {\n                            required: { value: true, errorMessage: 'Your username is required.' },\n                            pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: 'Your username can only contain letters and digits.' },\n                            minLength: { value: 1, errorMessage: 'Your username is required to be at least 1 character.' },\n                            maxLength: { value: 50, errorMessage: 'Your username cannot be longer than 50 characters.' }\n                        } }),\n                    React.createElement(AvField, { name: \"email\", label: \"Email\", placeholder: 'Your email', type: \"email\", validate: {\n                            required: { value: true, errorMessage: 'Your email is required.' },\n                            minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\n                            maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\n                        } }),\n                    React.createElement(AvField, { name: \"firstPassword\", label: \"New password\", placeholder: 'New password', type: \"password\", onChange: updatePassword, validate: {\n                            required: { value: true, errorMessage: 'Your password is required.' },\n                            minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\n                            maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\n                        } }),\n                    React.createElement(PasswordStrengthBar, { password: password }),\n                    React.createElement(AvField, { name: \"secondPassword\", label: \"New password confirmation\", placeholder: \"Confirm the new password\", type: \"password\", validate: {\n                            required: { value: true, errorMessage: 'Your confirmation password is required.' },\n                            minLength: { value: 4, errorMessage: 'Your confirmation password is required to be at least 4 characters.' },\n                            maxLength: { value: 50, errorMessage: 'Your confirmation password cannot be longer than 50 characters.' },\n                            match: { value: 'firstPassword', errorMessage: 'The password and its confirmation do not match!' }\n                        } }),\n                    React.createElement(Button, { id: \"register-submit\", color: \"primary\", type: \"submit\" }, \"Register\")),\n                React.createElement(\"p\", null, \"\\u00A0\"),\n                React.createElement(Alert, { color: \"warning\" },\n                    React.createElement(\"span\", null, \"If you want to\"),\n                    React.createElement(\"a\", { className: \"alert-link\" }, \" sign in\"),\n                    React.createElement(\"span\", null,\n                        \", you can try the default accounts:\",\n                        React.createElement(\"br\", null),\n                        \"- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")\",\n                        React.createElement(\"br\", null),\n                        \"- User (login=\\\"user\\\" and password=\\\"user\\\").\"))))));\n};\nconst mapDispatchToProps = { handleRegister, reset };\nexport default connect(null, mapDispatchToProps)(RegisterPage);\n",{"version":3,"file":"/Users/hien/Documents/junction/src/main/webapp/app/modules/account/register/register.tsx","sourceRoot":"","sources":["/Users/hien/Documents/junction/node_modules/eslint-loader/index.js!/Users/hien/Documents/junction/src/main/webapp/app/modules/account/register/register.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\n\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { IRootState } from 'app/shared/reducers';\nimport { handleRegister, reset } from './register.reducer';\n\nexport type IRegisterProps = DispatchProps;\n\nexport const RegisterPage = (props: IRegisterProps) => {\n  const [password, setPassword] = useState('');\n\n  useEffect(() => () => props.reset(), []);\n\n  const handleValidSubmit = (event, values) => {\n    props.handleRegister(values.username, values.email, values.firstPassword);\n    event.preventDefault();\n  };\n\n  const updatePassword = event => setPassword(event.target.value);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h1 id=\"register-title\">Registration</h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <AvForm id=\"register-form\" onValidSubmit={handleValidSubmit}>\n            <AvField\n              name=\"username\"\n              label=\"Username\"\n              placeholder={'Your username'}\n              validate={{\n                required: { value: true, errorMessage: 'Your username is required.' },\n                pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: 'Your username can only contain letters and digits.' },\n                minLength: { value: 1, errorMessage: 'Your username is required to be at least 1 character.' },\n                maxLength: { value: 50, errorMessage: 'Your username cannot be longer than 50 characters.' }\n              }}\n            />\n            <AvField\n              name=\"email\"\n              label=\"Email\"\n              placeholder={'Your email'}\n              type=\"email\"\n              validate={{\n                required: { value: true, errorMessage: 'Your email is required.' },\n                minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\n                maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\n              }}\n            />\n            <AvField\n              name=\"firstPassword\"\n              label=\"New password\"\n              placeholder={'New password'}\n              type=\"password\"\n              onChange={updatePassword}\n              validate={{\n                required: { value: true, errorMessage: 'Your password is required.' },\n                minLength: { value: 4, errorMessage: 'Your password is required to be at least 4 characters.' },\n                maxLength: { value: 50, errorMessage: 'Your password cannot be longer than 50 characters.' }\n              }}\n            />\n            <PasswordStrengthBar password={password} />\n            <AvField\n              name=\"secondPassword\"\n              label=\"New password confirmation\"\n              placeholder=\"Confirm the new password\"\n              type=\"password\"\n              validate={{\n                required: { value: true, errorMessage: 'Your confirmation password is required.' },\n                minLength: { value: 4, errorMessage: 'Your confirmation password is required to be at least 4 characters.' },\n                maxLength: { value: 50, errorMessage: 'Your confirmation password cannot be longer than 50 characters.' },\n                match: { value: 'firstPassword', errorMessage: 'The password and its confirmation do not match!' }\n              }}\n            />\n            <Button id=\"register-submit\" color=\"primary\" type=\"submit\">\n              Register\n            </Button>\n          </AvForm>\n          <p>&nbsp;</p>\n          <Alert color=\"warning\">\n            <span>If you want to</span>\n            <a className=\"alert-link\"> sign in</a>\n            <span>\n              , you can try the default accounts:\n              <br />- Administrator (login=&quot;admin&quot; and password=&quot;admin&quot;)\n              <br />- User (login=&quot;user&quot; and password=&quot;user&quot;).\n            </span>\n          </Alert>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = { handleRegister, reset };\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(RegisterPage);\n"]}]}