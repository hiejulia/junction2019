{"remainingRequest":"/Users/hien/Documents/junction/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/hien/Documents/junction/node_modules/ts-loader/index.js??ref--4-3!/Users/hien/Documents/junction/node_modules/eslint-loader/index.js!/Users/hien/Documents/junction/src/main/webapp/app/modules/account/settings/settings.tsx","dependencies":[{"path":"/Users/hien/Documents/junction/src/main/webapp/app/modules/account/settings/settings.tsx","mtime":1573937052882},{"path":"/Users/hien/Documents/junction/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/hien/Documents/junction/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import React, { useEffect } from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\nexport const SettingsPage = (props) => {\n    useEffect(() => {\n        props.getSession();\n        return () => {\n            props.reset();\n        };\n    }, []);\n    const handleValidSubmit = (event, values) => {\n        const account = Object.assign({}, props.account, values);\n        props.saveAccountSettings(account);\n        event.persist();\n    };\n    return (React.createElement(\"div\", null,\n        React.createElement(Row, { className: \"justify-content-center\" },\n            React.createElement(Col, { md: \"8\" },\n                React.createElement(\"h2\", { id: \"settings-title\" },\n                    \"User settings for \",\n                    props.account.login),\n                React.createElement(AvForm, { id: \"settings-form\", onValidSubmit: handleValidSubmit },\n                    React.createElement(AvField, { className: \"form-control\", name: \"firstName\", label: \"First Name\", id: \"firstName\", placeholder: \"Your first name\", validate: {\n                            required: { value: true, errorMessage: 'Your first name is required.' },\n                            minLength: { value: 1, errorMessage: 'Your first name is required to be at least 1 character' },\n                            maxLength: { value: 50, errorMessage: 'Your first name cannot be longer than 50 characters' }\n                        }, value: props.account.firstName }),\n                    React.createElement(AvField, { className: \"form-control\", name: \"lastName\", label: \"Last Name\", id: \"lastName\", placeholder: \"Your last name\", validate: {\n                            required: { value: true, errorMessage: 'Your last name is required.' },\n                            minLength: { value: 1, errorMessage: 'Your last name is required to be at least 1 character' },\n                            maxLength: { value: 50, errorMessage: 'Your last name cannot be longer than 50 characters' }\n                        }, value: props.account.lastName }),\n                    React.createElement(AvField, { name: \"email\", label: \"Email\", placeholder: 'Your email', type: \"email\", validate: {\n                            required: { value: true, errorMessage: 'Your email is required.' },\n                            minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\n                            maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\n                        }, value: props.account.email }),\n                    React.createElement(Button, { color: \"primary\", type: \"submit\" }, \"Save\"))))));\n};\nconst mapStateToProps = ({ authentication }) => ({\n    account: authentication.account,\n    isAuthenticated: authentication.isAuthenticated\n});\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n",{"version":3,"file":"/Users/hien/Documents/junction/src/main/webapp/app/modules/account/settings/settings.tsx","sourceRoot":"","sources":["/Users/hien/Documents/junction/node_modules/eslint-loader/index.js!/Users/hien/Documents/junction/src/main/webapp/app/modules/account/settings/settings.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Button, Col, Alert, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\n\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\n\nexport const SettingsPage = (props: IUserSettingsProps) => {\n  useEffect(() => {\n    props.getSession();\n    return () => {\n      props.reset();\n    };\n  }, []);\n\n  const handleValidSubmit = (event, values) => {\n    const account = {\n      ...props.account,\n      ...values\n    };\n\n    props.saveAccountSettings(account);\n    event.persist();\n  };\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2 id=\"settings-title\">User settings for {props.account.login}</h2>\n          <AvForm id=\"settings-form\" onValidSubmit={handleValidSubmit}>\n            {/* First name */}\n            <AvField\n              className=\"form-control\"\n              name=\"firstName\"\n              label=\"First Name\"\n              id=\"firstName\"\n              placeholder=\"Your first name\"\n              validate={{\n                required: { value: true, errorMessage: 'Your first name is required.' },\n                minLength: { value: 1, errorMessage: 'Your first name is required to be at least 1 character' },\n                maxLength: { value: 50, errorMessage: 'Your first name cannot be longer than 50 characters' }\n              }}\n              value={props.account.firstName}\n            />\n            {/* Last name */}\n            <AvField\n              className=\"form-control\"\n              name=\"lastName\"\n              label=\"Last Name\"\n              id=\"lastName\"\n              placeholder=\"Your last name\"\n              validate={{\n                required: { value: true, errorMessage: 'Your last name is required.' },\n                minLength: { value: 1, errorMessage: 'Your last name is required to be at least 1 character' },\n                maxLength: { value: 50, errorMessage: 'Your last name cannot be longer than 50 characters' }\n              }}\n              value={props.account.lastName}\n            />\n            {/* Email */}\n            <AvField\n              name=\"email\"\n              label=\"Email\"\n              placeholder={'Your email'}\n              type=\"email\"\n              validate={{\n                required: { value: true, errorMessage: 'Your email is required.' },\n                minLength: { value: 5, errorMessage: 'Your email is required to be at least 5 characters.' },\n                maxLength: { value: 254, errorMessage: 'Your email cannot be longer than 50 characters.' }\n              }}\n              value={props.account.email}\n            />\n            <Button color=\"primary\" type=\"submit\">\n              Save\n            </Button>\n          </AvForm>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SettingsPage);\n"]}]}