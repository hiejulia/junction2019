{"remainingRequest":"/Users/hien/Documents/junction/node_modules/thread-loader/dist/cjs.js??ref--4-2!/Users/hien/Documents/junction/node_modules/ts-loader/index.js??ref--4-3!/Users/hien/Documents/junction/node_modules/eslint-loader/index.js!/Users/hien/Documents/junction/src/main/webapp/app/entities/diary/diary.reducer.ts","dependencies":[{"path":"/Users/hien/Documents/junction/src/main/webapp/app/entities/diary/diary.reducer.ts","mtime":1573937763252},{"path":"/Users/hien/Documents/junction/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Documents/junction/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/hien/Documents/junction/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nimport { cleanEntity } from 'app/shared/util/entity-utils';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { defaultValue } from 'app/shared/model/diary.model';\nexport const ACTION_TYPES = {\n    FETCH_DIARY_LIST: 'diary/FETCH_DIARY_LIST',\n    FETCH_DIARY: 'diary/FETCH_DIARY',\n    CREATE_DIARY: 'diary/CREATE_DIARY',\n    UPDATE_DIARY: 'diary/UPDATE_DIARY',\n    DELETE_DIARY: 'diary/DELETE_DIARY',\n    RESET: 'diary/RESET'\n};\nconst initialState = {\n    loading: false,\n    errorMessage: null,\n    entities: [],\n    entity: defaultValue,\n    updating: false,\n    updateSuccess: false\n};\n// Reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case REQUEST(ACTION_TYPES.FETCH_DIARY_LIST):\n        case REQUEST(ACTION_TYPES.FETCH_DIARY):\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\n        case REQUEST(ACTION_TYPES.CREATE_DIARY):\n        case REQUEST(ACTION_TYPES.UPDATE_DIARY):\n        case REQUEST(ACTION_TYPES.DELETE_DIARY):\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, updating: true });\n        case FAILURE(ACTION_TYPES.FETCH_DIARY_LIST):\n        case FAILURE(ACTION_TYPES.FETCH_DIARY):\n        case FAILURE(ACTION_TYPES.CREATE_DIARY):\n        case FAILURE(ACTION_TYPES.UPDATE_DIARY):\n        case FAILURE(ACTION_TYPES.DELETE_DIARY):\n            return Object.assign({}, state, { loading: false, updating: false, updateSuccess: false, errorMessage: action.payload });\n        case SUCCESS(ACTION_TYPES.FETCH_DIARY_LIST):\n            return Object.assign({}, state, { loading: false, entities: action.payload.data });\n        case SUCCESS(ACTION_TYPES.FETCH_DIARY):\n            return Object.assign({}, state, { loading: false, entity: action.payload.data });\n        case SUCCESS(ACTION_TYPES.CREATE_DIARY):\n        case SUCCESS(ACTION_TYPES.UPDATE_DIARY):\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: action.payload.data });\n        case SUCCESS(ACTION_TYPES.DELETE_DIARY):\n            return Object.assign({}, state, { updating: false, updateSuccess: true, entity: {} });\n        case ACTION_TYPES.RESET:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n};\nconst apiUrl = 'api/diaries';\n// Actions\nexport const getEntities = (page, size, sort) => ({\n    type: ACTION_TYPES.FETCH_DIARY_LIST,\n    payload: axios.get(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\nexport const getEntity = id => {\n    const requestUrl = `${apiUrl}/${id}`;\n    return {\n        type: ACTION_TYPES.FETCH_DIARY,\n        payload: axios.get(requestUrl)\n    };\n};\nexport const createEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const result = yield dispatch({\n        type: ACTION_TYPES.CREATE_DIARY,\n        payload: axios.post(apiUrl, cleanEntity(entity))\n    });\n    dispatch(getEntities());\n    return result;\n});\nexport const updateEntity = entity => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const result = yield dispatch({\n        type: ACTION_TYPES.UPDATE_DIARY,\n        payload: axios.put(apiUrl, cleanEntity(entity))\n    });\n    dispatch(getEntities());\n    return result;\n});\nexport const deleteEntity = id => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const requestUrl = `${apiUrl}/${id}`;\n    const result = yield dispatch({\n        type: ACTION_TYPES.DELETE_DIARY,\n        payload: axios.delete(requestUrl)\n    });\n    dispatch(getEntities());\n    return result;\n});\nexport const reset = () => ({\n    type: ACTION_TYPES.RESET\n});\n",{"version":3,"file":"/Users/hien/Documents/junction/src/main/webapp/app/entities/diary/diary.reducer.ts","sourceRoot":"","sources":["/Users/hien/Documents/junction/node_modules/eslint-loader/index.js!/Users/hien/Documents/junction/src/main/webapp/app/entities/diary/diary.reducer.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AAEjF,OAAO,EAAU,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAEpE,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,gBAAgB,EAAE,wBAAwB;IAC1C,WAAW,EAAE,mBAAmB;IAChC,YAAY,EAAE,oBAAoB;IAClC,YAAY,EAAE,oBAAoB;IAClC,YAAY,EAAE,oBAAoB;IAClC,KAAK,EAAE,aAAa;CACrB,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,YAAY,EAAE,IAAI;IAClB,QAAQ,EAAE,EAA2B;IACrC,MAAM,EAAE,YAAY;IACpB,QAAQ,EAAE,KAAK;IACf,aAAa,EAAE,KAAK;CACrB,CAAC;AAIF,UAAU;AAEV,eAAe,CAAC,QAAoB,YAAY,EAAE,MAAM,EAAc,EAAE;IACtE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC5C,KAAK,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC;YACpC,yBACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACxC,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACxC,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC;YACrC,yBACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,QAAQ,EAAE,IAAI,IACd;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC5C,KAAK,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;QACvC,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACxC,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACxC,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC;YACrC,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,KAAK,EACpB,YAAY,EAAE,MAAM,CAAC,OAAO,IAC5B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC;YACzC,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC7B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC;YACpC,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC3B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACxC,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC;YACrC,yBACK,KAAK,IACR,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,IAAI,EACnB,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,IAC3B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC;YACrC,yBACK,KAAK,IACR,QAAQ,EAAE,KAAK,EACf,aAAa,EAAE,IAAI,EACnB,MAAM,EAAE,EAAE,IACV;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,yBACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,aAAa,CAAC;AAE7B,UAAU;AAEV,MAAM,CAAC,MAAM,WAAW,GAA8B,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC3E,IAAI,EAAE,YAAY,CAAC,gBAAgB;IACnC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAS,GAAG,MAAM,gBAAgB,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC;CAC5E,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,SAAS,GAA2B,EAAE,CAAC,EAAE;IACpD,MAAM,UAAU,GAAG,GAAG,MAAM,IAAI,EAAE,EAAE,CAAC;IACrC,OAAO;QACL,IAAI,EAAE,YAAY,CAAC,WAAW;QAC9B,OAAO,EAAE,KAAK,CAAC,GAAG,CAAS,UAAU,CAAC;KACvC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAA2B,MAAM,CAAC,EAAE,CAAC,CAAM,QAAQ,EAAC,EAAE;IAC7E,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;QAC5B,IAAI,EAAE,YAAY,CAAC,YAAY;QAC/B,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;KACjD,CAAC,CAAC;IACH,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;IACxB,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAA2B,MAAM,CAAC,EAAE,CAAC,CAAM,QAAQ,EAAC,EAAE;IAC7E,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;QAC5B,IAAI,EAAE,YAAY,CAAC,YAAY;QAC/B,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;KAChD,CAAC,CAAC;IACH,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;IACxB,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAA8B,EAAE,CAAC,EAAE,CAAC,CAAM,QAAQ,EAAC,EAAE;IAC5E,MAAM,UAAU,GAAG,GAAG,MAAM,IAAI,EAAE,EAAE,CAAC;IACrC,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC;QAC5B,IAAI,EAAE,YAAY,CAAC,YAAY;QAC/B,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC;KAClC,CAAC,CAAC;IACH,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;IACxB,OAAO,MAAM,CAAC;AAChB,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,CAAC","sourcesContent":["import axios from 'axios';\nimport { ICrudGetAction, ICrudGetAllAction, ICrudPutAction, ICrudDeleteAction } from 'react-jhipster';\n\nimport { cleanEntity } from 'app/shared/util/entity-utils';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nimport { IDiary, defaultValue } from 'app/shared/model/diary.model';\n\nexport const ACTION_TYPES = {\n  FETCH_DIARY_LIST: 'diary/FETCH_DIARY_LIST',\n  FETCH_DIARY: 'diary/FETCH_DIARY',\n  CREATE_DIARY: 'diary/CREATE_DIARY',\n  UPDATE_DIARY: 'diary/UPDATE_DIARY',\n  DELETE_DIARY: 'diary/DELETE_DIARY',\n  RESET: 'diary/RESET'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  entities: [] as ReadonlyArray<IDiary>,\n  entity: defaultValue,\n  updating: false,\n  updateSuccess: false\n};\n\nexport type DiaryState = Readonly<typeof initialState>;\n\n// Reducer\n\nexport default (state: DiaryState = initialState, action): DiaryState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_DIARY_LIST):\n    case REQUEST(ACTION_TYPES.FETCH_DIARY):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case REQUEST(ACTION_TYPES.CREATE_DIARY):\n    case REQUEST(ACTION_TYPES.UPDATE_DIARY):\n    case REQUEST(ACTION_TYPES.DELETE_DIARY):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        updating: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_DIARY_LIST):\n    case FAILURE(ACTION_TYPES.FETCH_DIARY):\n    case FAILURE(ACTION_TYPES.CREATE_DIARY):\n    case FAILURE(ACTION_TYPES.UPDATE_DIARY):\n    case FAILURE(ACTION_TYPES.DELETE_DIARY):\n      return {\n        ...state,\n        loading: false,\n        updating: false,\n        updateSuccess: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_DIARY_LIST):\n      return {\n        ...state,\n        loading: false,\n        entities: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_DIARY):\n      return {\n        ...state,\n        loading: false,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.CREATE_DIARY):\n    case SUCCESS(ACTION_TYPES.UPDATE_DIARY):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.DELETE_DIARY):\n      return {\n        ...state,\n        updating: false,\n        updateSuccess: true,\n        entity: {}\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = 'api/diaries';\n\n// Actions\n\nexport const getEntities: ICrudGetAllAction<IDiary> = (page, size, sort) => ({\n  type: ACTION_TYPES.FETCH_DIARY_LIST,\n  payload: axios.get<IDiary>(`${apiUrl}?cacheBuster=${new Date().getTime()}`)\n});\n\nexport const getEntity: ICrudGetAction<IDiary> = id => {\n  const requestUrl = `${apiUrl}/${id}`;\n  return {\n    type: ACTION_TYPES.FETCH_DIARY,\n    payload: axios.get<IDiary>(requestUrl)\n  };\n};\n\nexport const createEntity: ICrudPutAction<IDiary> = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.CREATE_DIARY,\n    payload: axios.post(apiUrl, cleanEntity(entity))\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const updateEntity: ICrudPutAction<IDiary> = entity => async dispatch => {\n  const result = await dispatch({\n    type: ACTION_TYPES.UPDATE_DIARY,\n    payload: axios.put(apiUrl, cleanEntity(entity))\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const deleteEntity: ICrudDeleteAction<IDiary> = id => async dispatch => {\n  const requestUrl = `${apiUrl}/${id}`;\n  const result = await dispatch({\n    type: ACTION_TYPES.DELETE_DIARY,\n    payload: axios.delete(requestUrl)\n  });\n  dispatch(getEntities());\n  return result;\n};\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n"]}]}