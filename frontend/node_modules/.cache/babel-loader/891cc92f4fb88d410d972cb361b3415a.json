{"remainingRequest":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js!/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/eslint-loader/index.js??ref--13-0!/Users/hien/Desktop/vue-argon-dashboard-master/src/store/index.js","dependencies":[{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/src/store/index.js","mtime":1573868006504},{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _slicedToArray from \"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport defaultState from \"./defaultState\";\nimport JSONfn from 'json-fn';\nVue.use(Vuex);\nvar store = new Vuex.Store({\n  state: defaultState,\n  getters: {\n    currentStepIndex: function currentStepIndex(state) {\n      return state.steps.findIndex(function (step) {\n        return step.id === state.currentStep.id;\n      });\n    },\n    currentStepHasOptions: function currentStepHasOptions(state) {\n      return state.currentStep && state.currentStep.options;\n    },\n    currentStepHasUserInput: function currentStepHasUserInput(state) {\n      return state.currentStep && state.currentStep.userInput;\n    }\n  },\n  actions: {\n    doStep: function doStep(_ref, step) {\n      var commit = _ref.commit,\n          state = _ref.state;\n      commit('setCurrentStep', step);\n\n      var callback = function callback() {\n        store.dispatch('validateCurrentStep');\n      };\n\n      var message = {\n        source: 'bot',\n        content: step.message\n      };\n      store.dispatch('addBotMessage', [message, step.delay, step.duration, callback]);\n    },\n    addBotMessage: function addBotMessage(_ref2, _ref3) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n\n      var _ref4 = _slicedToArray(_ref3, 4),\n          message = _ref4[0],\n          delay = _ref4[1],\n          duration = _ref4[2],\n          callback = _ref4[3];\n\n      if (message.content) {\n        delay = delay || delay === 0 ? delay : state.defaultDelay;\n        duration = duration || duration === 0 ? duration : state.defaultDuration;\n        setTimeout(function () {\n          state.isTyping = true;\n          setTimeout(function () {\n            state.isTyping = false; // Add message if available and play sound\n\n            if (message.content) {\n              commit('addMessage', message);\n              var audio = new Audio(state.notificationSound);\n              audio.volume = 0.1;\n              audio.play();\n            } // Add unread if closed\n\n\n            if (!state.chatBoxOpen) {\n              state.unreadMessages.push(message);\n            }\n\n            if (callback) {\n              callback();\n            }\n          }, duration);\n        }, delay);\n      }\n    },\n    doStepId: function doStepId(_ref5, id) {\n      var commit = _ref5.commit,\n          state = _ref5.state;\n      var stepIndex = state.steps.findIndex(function (step) {\n        return step.id === id;\n      });\n\n      if (state.steps[stepIndex]) {\n        store.dispatch('doStep', state.steps[stepIndex]);\n      }\n    },\n    validateCurrentStep: function validateCurrentStep(_ref6) {\n      var commit = _ref6.commit,\n          state = _ref6.state;\n\n      if (store.getters.currentStepHasOptions || store.getters.currentStepHasUserInput) {\n        if (state.userInputObject) {\n          var isValid = true;\n\n          if (state.currentStep.validate) {\n            isValid = state.currentStep.validate(state.userInputObject);\n          }\n\n          if (isValid) {\n            store.dispatch('moveToNextStep');\n          } else {\n            var invalidMessage = {\n              source: 'bot',\n              content: state.currentStep.invalidMessage,\n              cssClasses: 'invalid-message'\n            };\n            store.dispatch('addBotMessage', [invalidMessage]);\n          }\n        }\n      } else {\n        store.dispatch('moveToNextStep');\n      }\n    },\n    moveToNextStep: function moveToNextStep(_ref7) {\n      var commit = _ref7.commit,\n          state = _ref7.state;\n\n      // Set user data\n      if (state.currentStep.key) {\n        commit('setUserData', [state.currentStep.key, state.userInputObject.value]);\n      } // Do callback\n\n\n      if (state.currentStep.callback) {\n        state.currentStep.callback(state.currentStep, state.userInputObject);\n      } // Go to trigger or next in array\n\n\n      if (state.userInputObject && state.userInputObject.trigger) {\n        var stepId = state.userInputObject.trigger;\n      } else if (state.currentStep.trigger) {\n        stepId = state.currentStep.trigger;\n      } else {\n        var nextStep = state.steps[store.getters.currentStepIndex + 1];\n        stepId = nextStep ? nextStep.id : null;\n      }\n\n      state.userInputObject = null;\n      store.dispatch('doStepId', stepId);\n    },\n    addUserInput: function addUserInput(_ref8, object) {\n      var commit = _ref8.commit,\n          state = _ref8.state;\n      var message = {\n        source: 'user',\n        content: object.label ? object.label : object.value\n      };\n      commit('setUserInputObject', object);\n      commit('addMessage', message);\n      store.dispatch('validateCurrentStep');\n    }\n  },\n  mutations: {\n    setInitialState: function setInitialState(state, _ref9) {\n      var _ref10 = _slicedToArray(_ref9, 1),\n          defaultState = _ref10[0];\n\n      if (defaultState.persistedState && localStorage.getItem(defaultState.persistedState)) {\n        var persistedState = JSONfn.parse(localStorage.getItem(defaultState.persistedState));\n        Object.keys(persistedState).forEach(function (key) {\n          state[key] = persistedState[key];\n        });\n\n        if (state.currentStep && state.messages[state.messages.length - 1].content !== state.currentStep.message) {\n          store.dispatch('doStep', state.currentStep);\n        }\n      } else {\n        this.replaceState(defaultState);\n\n        if (state.steps && !state.currentStep) {\n          store.dispatch('doStep', state.steps[0]);\n        }\n      }\n    },\n    addMessage: function addMessage(state, message) {\n      if (message.content) {\n        state.messages.push(message);\n      }\n    },\n    setSteps: function setSteps(state, steps) {\n      state.steps = steps;\n    },\n    addSteps: function addSteps(state, steps) {\n      state.steps = state.steps.concat(steps);\n    },\n    setMessages: function setMessages(state, messages) {\n      state.messages = messages;\n    },\n    setCurrentStep: function setCurrentStep(state, step) {\n      state.currentStep = step;\n    },\n    setUserInputObject: function setUserInputObject(state, object) {\n      state.userInputObject = object;\n    },\n    setUserData: function setUserData(state, _ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n          key = _ref12[0],\n          value = _ref12[1];\n\n      Vue.set(state.userData, key, value);\n    },\n    toggleChatBox: function toggleChatBox(state) {\n      if (state.chatBoxOpen) {\n        state.chatBoxOpen = false;\n      } else {\n        state.unreadMessages = [];\n        state.chatBoxOpen = true;\n      }\n    }\n  }\n});\nexport default store;",{"version":3,"sources":["/Users/hien/Desktop/vue-argon-dashboard-master/src/store/index.js"],"names":["Vue","Vuex","defaultState","JSONfn","use","store","Store","state","getters","currentStepIndex","steps","findIndex","step","id","currentStep","currentStepHasOptions","options","currentStepHasUserInput","userInput","actions","doStep","commit","callback","dispatch","message","source","content","delay","duration","addBotMessage","defaultDelay","defaultDuration","setTimeout","isTyping","audio","Audio","notificationSound","volume","play","chatBoxOpen","unreadMessages","push","doStepId","stepIndex","validateCurrentStep","userInputObject","isValid","validate","invalidMessage","cssClasses","moveToNextStep","key","value","trigger","stepId","nextStep","addUserInput","object","label","mutations","setInitialState","persistedState","localStorage","getItem","parse","Object","keys","forEach","messages","length","replaceState","addMessage","setSteps","addSteps","concat","setMessages","setCurrentStep","setUserInputObject","setUserData","set","userData","toggleChatBox"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport defaultState from './defaultState'\nimport JSONfn from 'json-fn'\nVue.use(Vuex)\n\nconst store = new Vuex.Store({\n  state: defaultState,\n  getters: {\n    currentStepIndex (state) {\n      return state.steps.findIndex(function (step) {\n        return step.id === state.currentStep.id\n      })\n    },\n    currentStepHasOptions (state) {\n      return state.currentStep && state.currentStep.options\n    },\n    currentStepHasUserInput (state) {\n      return state.currentStep && state.currentStep.userInput\n    }\n  },\n  actions: {\n\n    doStep ({commit, state}, step) {\n      commit('setCurrentStep', step)\n      var callback = function () {\n        store.dispatch('validateCurrentStep')\n      }\n      var message = {\n        source: 'bot',\n        content: step.message\n      }\n      store.dispatch('addBotMessage', [message, step.delay, step.duration, callback])\n    },\n\n    addBotMessage ({commit, state}, [message, delay, duration, callback]) {\n      if (message.content) {\n        delay = delay || delay === 0 ? delay : state.defaultDelay\n        duration = duration || duration === 0 ? duration : state.defaultDuration\n        setTimeout(function () {\n          state.isTyping = true\n          setTimeout(function () {\n            state.isTyping = false\n            // Add message if available and play sound\n            if (message.content) {\n              commit('addMessage', message)\n              var audio = new Audio(state.notificationSound)\n              audio.volume = 0.1\n              audio.play()\n            }\n            // Add unread if closed\n            if (!state.chatBoxOpen) {\n              state.unreadMessages.push(message)\n            }\n            if (callback) {\n              callback()\n            }\n          }, duration)\n        }, delay)\n      }\n    },\n\n    doStepId ({commit, state}, id) {\n      var stepIndex = state.steps.findIndex(function (step) {\n        return step.id === id\n      })\n      if (state.steps[stepIndex]) {\n        store.dispatch('doStep', state.steps[stepIndex])\n      }\n    },\n\n    validateCurrentStep ({commit, state}) {\n      if (store.getters.currentStepHasOptions || store.getters.currentStepHasUserInput) {\n        if (state.userInputObject) {\n          var isValid = true\n          if (state.currentStep.validate) {\n            isValid = state.currentStep.validate(state.userInputObject)\n          }\n          if (isValid) {\n            store.dispatch('moveToNextStep')\n          } else {\n            var invalidMessage = {\n              source: 'bot',\n              content: state.currentStep.invalidMessage,\n              cssClasses: 'invalid-message'\n            }\n            store.dispatch('addBotMessage', [invalidMessage])\n          }\n        }\n      } else {\n        store.dispatch('moveToNextStep')\n      }\n    },\n\n    moveToNextStep ({commit, state}) {\n      // Set user data\n      if (state.currentStep.key) {\n        commit('setUserData', [state.currentStep.key, state.userInputObject.value])\n      }\n\n      // Do callback\n      if (state.currentStep.callback) {\n        state.currentStep.callback(state.currentStep, state.userInputObject)\n      }\n\n      // Go to trigger or next in array\n      if (state.userInputObject && state.userInputObject.trigger) {\n        var stepId = state.userInputObject.trigger\n      } else if (state.currentStep.trigger) {\n        stepId = state.currentStep.trigger\n      } else {\n        var nextStep = state.steps[store.getters.currentStepIndex + 1]\n        stepId = nextStep ? nextStep.id : null\n      }\n      state.userInputObject = null\n      store.dispatch('doStepId', stepId)\n    },\n\n    addUserInput ({commit, state}, object) {\n      var message = {\n        source: 'user',\n        content: object.label ? object.label : object.value\n      }\n      commit('setUserInputObject', object)\n      commit('addMessage', message)\n      store.dispatch('validateCurrentStep')\n    }\n\n  },\n  mutations: {\n    setInitialState (state, [defaultState]) {\n      if (defaultState.persistedState && localStorage.getItem(defaultState.persistedState)) {\n        let persistedState = JSONfn.parse(localStorage.getItem(defaultState.persistedState))\n        Object.keys(persistedState).forEach(key => { state[key] = persistedState[key] })\n        if (state.currentStep && state.messages[state.messages.length - 1].content !== state.currentStep.message) {\n          store.dispatch('doStep', state.currentStep)\n        }\n      } else {\n        this.replaceState(defaultState)\n        if (state.steps && !state.currentStep) {\n          store.dispatch('doStep', state.steps[0])\n        }\n      }\n    },\n    addMessage (state, message) {\n      if (message.content) {\n        state.messages.push(message)\n      }\n    },\n    setSteps (state, steps) {\n      state.steps = steps\n    },\n    addSteps (state, steps) {\n      state.steps = state.steps.concat(steps)\n    },\n    setMessages (state, messages) {\n      state.messages = messages\n    },\n    setCurrentStep (state, step) {\n      state.currentStep = step\n    },\n    setUserInputObject (state, object) {\n      state.userInputObject = object\n    },\n    setUserData (state, [key, value]) {\n      Vue.set(state.userData, key, value)\n    },\n    toggleChatBox (state) {\n      if (state.chatBoxOpen) {\n        state.chatBoxOpen = false\n      } else {\n        state.unreadMessages = []\n        state.chatBoxOpen = true\n      }\n    }\n  }\n})\n\nexport default store\n"]}]}