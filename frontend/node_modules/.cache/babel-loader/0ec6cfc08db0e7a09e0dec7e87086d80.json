{"remainingRequest":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js!/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hien/Desktop/vue-argon-dashboard-master/src/views/CameraView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/src/views/CameraView.vue","mtime":1573974223415},{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport _slicedToArray from \"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/hien/Desktop/vue-argon-dashboard-master/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.replace\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Camera from \"vue-html5-camera\";\nimport axios from 'axios';\nimport fs from 'fs';\n\nvar vision = require('@google-cloud/vision'); // Imports the Google Cloud client library\n\n\nvar _require = require('@google-cloud/storage'),\n    Storage = _require.Storage; // Creates a client\n\n\nvar storage = new Storage();\nvar bucket = storage.bucket(\"junctionimages\");\n\nvar base64 = require('node-base64-image');\n\nvar credentials = require(\"../auth/creds.json\");\n\nexport default {\n  data: function data() {\n    return {\n      src: \"\",\n      filesToUpload: [],\n      images: [],\n      uploadedImagesUrl: [],\n      progress: 0,\n      uploaded: false,\n      uploadStart: false\n    };\n  },\n  methods: {\n    dataURIToBlob: function dataURIToBlob(dataURI) {\n      dataURI = dataURI.replace(/^data:/, '');\n      var type = dataURI.match(/image\\/[^;]+/);\n      var base64 = dataURI.replace(/^[^,]+,/, '');\n      var arrayBuffer = new ArrayBuffer(base64.length);\n      var typedArray = new Uint8Array(arrayBuffer);\n\n      for (var i = 0; i < base64.length; i++) {\n        typedArray[i] = base64.charCodeAt(i);\n      }\n\n      return new Blob([arrayBuffer], {\n        type: type\n      });\n    },\n    blobToFile: function blobToFile(theBlob, fileName) {\n      //A Blob() is almost a File() - it's just missing the two properties below which we will add\n      theBlob.lastModifiedDate = new Date();\n      theBlob.name = fileName;\n      return theBlob;\n    },\n    getPhoto: function getPhoto() {\n      this.src = this.$refs.camera.click(); // Base 64 image \n\n      this.callAnnotateImage(this.src); // End Base 64 image\n      //       fs.writeFile('image.png', this.src, {encoding: 'base64'}, function(err) {\n      //     console.log('File created');\n      // });\n      // Blob type\n\n      var blobImage = this.dataURIToBlob(this.src, 'emotion1');\n      var imageUrl = URL.createObjectURL(blobImage);\n      console.log(imageUrl);\n      var srcImage = URL.revokeObjectURL(imageUrl);\n      var filename = this.blobToFile(blobImage); // Download image to the local file\n      // var a = document.createElement(\"a\"); //Create <a>\n      // a.href = this.src\n      // a.download = \"faceemotion.png\"; //File name Here\n      // a.click(); //Downloaded file\n      // End download image\n      // Push the download file -> cloud -> get URL\n      // Save url to the DB\n      //\n      // return url \n    },\n    // Extract the Emotion via photo \n    callAnnotateImage: function () {\n      var _callAnnotateImage = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(base64String) {\n        var client, _ref, _ref2, result, faces;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                client = new vision.ImageAnnotatorClient(); // const request = {\n                //     \"image\": {\n                //         \"content\": base64String\n                //     },\n                //     \"features\": [\n                //         {\n                //             \"type\": \"FACE_DETECTION\"\n                //         },\n                //         {\n                //             \"type\": \"LABEL_DETECTION\"\n                //         },\n                //         {\n                //             \"type\": \"IMAGE_PROPERTIES\"\n                //         },\n                //         {\n                //             \"type\": \"WEB_DETECTION\"\n                //         }\n                //     ],\n                // };\n                // try {\n                //     const call = await client.annotateImage(request);\n                //     console.log(call);\n                // } catch (error) {\n                //     console.error(error);\n                // }\n\n                _context.next = 3;\n                return client.faceDetection(base64String);\n\n              case 3:\n                _ref = _context.sent;\n                _ref2 = _slicedToArray(_ref, 1);\n                result = _ref2[0];\n                faces = result.faceAnnotations;\n                console.log('Faces:');\n                faces.forEach(function (face, i) {\n                  console.log(\"  Face #\".concat(i + 1, \":\"));\n                  console.log(\"    Joy: \".concat(face.joyLikelihood));\n                  console.log(\"    Anger: \".concat(face.angerLikelihood));\n                  console.log(\"    Sorrow: \".concat(face.sorrowLikelihood));\n                  console.log(\"    Surprise: \".concat(face.surpriseLikelihood));\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function callAnnotateImage(_x) {\n        return _callAnnotateImage.apply(this, arguments);\n      }\n\n      return callAnnotateImage;\n    }(),\n    // End extract the Emotion via Photo \n    // Main function for upload\n    uploadFile: function () {\n      var _uploadFile = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var bucketName, filename;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                bucketName = \"junctionimages\";\n                filename = this.blobToFile(this.dataURIToBlob(this.src), 'emotion1'); // Uploads a local file to the bucket\n\n                _context2.next = 4;\n                return storage.bucket(bucketName).upload(filename, {\n                  // Support for HTTP requests made with `Accept-Encoding: gzip`\n                  gzip: true,\n                  // By setting the option `destination`, you can change the name of the\n                  // object you are uploading to a bucket.\n                  metadata: {\n                    // Enable long-lived HTTP caching headers\n                    // Use only if the contents of the file will never change\n                    // (If the contents will change, use cacheControl: 'no-cache')\n                    cacheControl: 'public, max-age=31536000'\n                  }\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function uploadFile() {\n        return _uploadFile.apply(this, arguments);\n      }\n\n      return uploadFile;\n    }(),\n    extractEmotions: function () {\n      var _extractEmotions = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var vision, client, imageUrl, _ref3, _ref4, result, labels;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Imports the Google Cloud client library\n                vision = require('@google-cloud/vision'); // Creates a client\n\n                client = new vision.ImageAnnotatorClient(); // Performs label detection on the image file\n\n                imageUrl = \"https://images.unsplash.com/photo-1467307983825-619715426c70?ixlib=rb-1.2.1&auto=format&fit=crop&w=1340&q=80\";\n                _context3.next = 5;\n                return client.labelDetection(imageUrl);\n\n              case 5:\n                _ref3 = _context3.sent;\n                _ref4 = _slicedToArray(_ref3, 1);\n                result = _ref4[0];\n                labels = result.labelAnnotations;\n                labels.forEach(function (label) {\n                  return console.log(label.description);\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function extractEmotions() {\n        return _extractEmotions.apply(this, arguments);\n      }\n\n      return extractEmotions;\n    }() // POST - /api/upload images / users \n\n  },\n  components: {\n    Camera: Camera\n  }\n};",{"version":3,"sources":["CameraView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <base-header class=\"header pb-8 pt-5 pt-lg-8 d-flex align-items-center\"\n                     >\n            <!-- Mask -->\n            \n        </base-header>\n\n        <div class=\"container-fluid mt--7\">\n                <!--Message part-->\n                <div class=\"col-xl-8 order-xl-1\">\n                    <card shadow type=\"secondary\">\n                        <div slot=\"header\" class=\"bg-white border-0\">\n                            <div class=\"row align-items-center\">\n                                <div class=\"col-8\">\n                                    <h3 class=\"mb-0\">Opening your camera...</h3>\n                                </div>\n                                <div class=\"col-4 text-right\">\n                                    <a href=\"#!\" class=\"btn btn-sm btn-primary\">Settings</a>\n                                </div>\n                              <!---Start the camera-->\n\n          <main>\n    <Camera ref=\"camera\" width=\"300\" height=\"300\" />\n    <button @click=\"getPhoto\">What is my emotion?</button>\n    <img alt=\"Your image\" :src=\"src\" v-if=\"src\">\n\n    <p>HAPPY - 90%</p>\n    <p>Recommendation : You are enjoy life at the bese. Good mental health is a prerequisite for good physical health. </p>\n  </main>\n\n                              <!--End the camera--->             \n                            </div>\n                        </div>\n                        \n                    </card>\n                </div>\n                <!--End Message part-->\n\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Camera from \"vue-html5-camera\"\nimport axios from 'axios';\nimport fs from 'fs'\n\nconst vision = require('@google-cloud/vision')\n\n// Imports the Google Cloud client library\nconst {Storage} = require('@google-cloud/storage');\n// Creates a client\nconst storage = new Storage();\nconst bucket = storage.bucket(\"junctionimages\")\nconst base64 = require('node-base64-image'); \nconst credentials = require('../auth/creds.json');\n\nexport default {\n  data() {\n    return {\n      src: \"\",\n      filesToUpload:[],\n      images:[],\n      uploadedImagesUrl:[],\n      progress:0,\n      uploaded:false,\n      uploadStart:false\n    }\n  },\n  methods: {\n  dataURIToBlob(dataURI) {\n    dataURI = dataURI.replace(/^data:/, '');\n\n    const type = dataURI.match(/image\\/[^;]+/);\n    const base64 = dataURI.replace(/^[^,]+,/, '');\n    const arrayBuffer = new ArrayBuffer(base64.length);\n    const typedArray = new Uint8Array(arrayBuffer);\n\n    for (let i = 0; i < base64.length; i++) {\n        typedArray[i] = base64.charCodeAt(i);\n    }\n\n    return new Blob([arrayBuffer], {type});\n},\n    \n    blobToFile(theBlob, fileName){\n    //A Blob() is almost a File() - it's just missing the two properties below which we will add\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    return theBlob;\n},\n    getPhoto() {\n      this.src = this.$refs.camera.click();\n\n\n      // Base 64 image \n\n      this.callAnnotateImage(this.src)\n\n      // End Base 64 image\n      \n//       fs.writeFile('image.png', this.src, {encoding: 'base64'}, function(err) {\n//     console.log('File created');\n// });\n    \n      // Blob type\n\n      var blobImage = this.dataURIToBlob((this.src),'emotion1')\n\n      const imageUrl = URL.createObjectURL(blobImage);\n\n      console.log(imageUrl)\n      const srcImage = URL.revokeObjectURL(imageUrl)\n    \n      var filename = this.blobToFile(blobImage)\n      \n      // Download image to the local file\n      // var a = document.createElement(\"a\"); //Create <a>\n      // a.href = this.src\n      // a.download = \"faceemotion.png\"; //File name Here\n      // a.click(); //Downloaded file\n      // End download image\n      \n\n      // Push the download file -> cloud -> get URL\n\n      // Save url to the DB\n\n      //\n\n      // return url \n      \n    },\n\n  // Extract the Emotion via photo \n\n    async callAnnotateImage(base64String) {\n\n      const client = new vision.ImageAnnotatorClient();\n\n    // const request = {\n    //     \"image\": {\n    //         \"content\": base64String\n    //     },\n    //     \"features\": [\n    //         {\n    //             \"type\": \"FACE_DETECTION\"\n    //         },\n    //         {\n    //             \"type\": \"LABEL_DETECTION\"\n    //         },\n    //         {\n    //             \"type\": \"IMAGE_PROPERTIES\"\n    //         },\n    //         {\n    //             \"type\": \"WEB_DETECTION\"\n    //         }\n    //     ],\n    // };\n\n    // try {\n    //     const call = await client.annotateImage(request);\n    //     console.log(call);\n    // } catch (error) {\n    //     console.error(error);\n    // }\n    const [result] = await client.faceDetection(base64String);\n  const faces = result.faceAnnotations;\n  console.log('Faces:');\n  faces.forEach((face, i) => {\n    console.log(`  Face #${i + 1}:`);\n    console.log(`    Joy: ${face.joyLikelihood}`);\n    console.log(`    Anger: ${face.angerLikelihood}`);\n    console.log(`    Sorrow: ${face.sorrowLikelihood}`);\n    console.log(`    Surprise: ${face.surpriseLikelihood}`);\n  });\n\n},\n\n  // End extract the Emotion via Photo \n\n    // Main function for upload\n    async uploadFile() {\n      var bucketName = \"junctionimages\"\n      var filename = this.blobToFile(this.dataURIToBlob(this.src),'emotion1')\n    // Uploads a local file to the bucket\n    await storage.bucket(bucketName).upload(filename, {\n\n    // Support for HTTP requests made with `Accept-Encoding: gzip`\n    gzip: true,\n    // By setting the option `destination`, you can change the name of the\n    // object you are uploading to a bucket.\n    metadata: {\n      // Enable long-lived HTTP caching headers\n      // Use only if the contents of the file will never change\n      // (If the contents will change, use cacheControl: 'no-cache')\n      cacheControl: 'public, max-age=31536000',\n    },\n  });\n},\n\n\nasync extractEmotions() {\n  // Imports the Google Cloud client library\n  const vision = require('@google-cloud/vision');\n  // Creates a client\n  const client = new vision.ImageAnnotatorClient();\n\n  // Performs label detection on the image file\n  const imageUrl = \"https://images.unsplash.com/photo-1467307983825-619715426c70?ixlib=rb-1.2.1&auto=format&fit=crop&w=1340&q=80\"\n  \n  const [result] = await client.labelDetection(imageUrl);\n\n  \n  const labels = result.labelAnnotations;\n  \n  labels.forEach(label => console.log(label.description));\n}\n\n    // POST - /api/upload images / users \n  },\n  components: {\n    Camera\n  }\n}\n</script>\n\n\n<style></style>\n\n"],"sourceRoot":"src/views"}]}